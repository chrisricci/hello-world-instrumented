openshift.withCluster() {
    env.APP_NAME = 'hello-world-production'
    env.APP_NAME_CANARY = "hello-world-canary"
    env.CICD_NAMESPACE = 'monitoring-demo-cicd'
    env.DEPLOY_NAMESPACE = 'monitoring-demo-prod'
    replicaCount = 3
    canaryWeight=10 //percentage

    promoteOrRollback=null
}

/* Notes:
   Errors will stop execution, if Result.status!=0 return by api. This practically useful only in case of synchronous operations:
   openshift.startBuild(...,"--wait"), rollout.status()

   Rollout.status() streams the output and waits for the pods until Running. Pods should have readiness probes to make this work.

   DeploymentConfig created by openshift.newApp() has the trigger automatic=true, so it starts immediately.
   We create the DC, let it start, then modify it and start the rollout again.
 */

pipeline {
    agent any
    stages {
        /*************
         * Build
         *************/
        stage("Create build config") {
            when{
                not { expression {
                        openshift.withCluster() {
                            return openshift.selector('bc', APP_NAME).exists()
                        }
                    }
                }
            }
            steps {
                echo "Create build config ${APP_NAME} in namespace " + openshift.withCluster() { openshift.project() }
                script {
                    openshift.withCluster() {
                        //Binary build config, so it has no git source, and not started automatically.
                        //Must be started manually by giving the 'from-dir'
                        openshift.newBuild("--binary", "--name=${APP_NAME}" , "--strategy=docker")
                    }
                }
            }
        }

        stage("Build image") {
            steps {
                script {
                    openshift.withCluster() {
                        buildSelector = openshift.selector('bc', APP_NAME).startBuild("--from-dir=.", "--wait")
                        //if (buildSelector.object().status.phase != "Complete") error("Build failed: ${buildSelector.object().status.message}") //Process stops without this
                        echo "Build complete: " + buildSelector.names()
                    }
                }
            }
        }

        /*************
         * Canary deployment
         *************/
        //Need permission: oc policy add-role-to-user edit system:serviceaccount:myproject:jenkins -n $DEPLOY_PROJECT
        stage("Canary deployment") {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("$DEPLOY_NAMESPACE") {
                            //Tag latest rom build namespace
                            openshift.tag("$CICD_NAMESPACE/$APP_NAME:latest", "$DEPLOY_NAMESPACE/$APP_NAME_CANARY:latest")

                            if (!openshift.selector('dc', APP_NAME_CANARY).exists()) {
                                /***
                                 * First deployment
                                 **/
                                echo "First deployment of ${APP_NAME_CANARY} in namespace ${DEPLOY_NAMESPACE}"

                                //The canary deployment also has it's own image stream in this namespace.
                                //Create new app
                                def newAppSelector = openshift.newApp("$DEPLOY_NAMESPACE/$APP_NAME_CANARY", "--name=${APP_NAME_CANARY}",  "--labels=service=${APP_NAME}")
                                echo "Created: "+newAppSelector.names()

                                //wait for initial rollout
                                openshift.selector('dc', APP_NAME_CANARY).rollout().status()

                                //Remove automatic trigger from DeploymentConfig. It may or may not stop the first deployment if removed too early
                                openshift.set("triggers", "dc/$APP_NAME_CANARY", "--manual")

                                //Add readiness/liveness probes. These will be applied after the rollout upcoming.
                                openshift.set("probe dc/$APP_NAME_CANARY --readiness --get-url=http://:8080/ --initial-delay-seconds=5 --failure-threshold=10 --period-seconds=10")
                                openshift.set("probe dc/$APP_NAME_CANARY --liveness  --get-url=http://:8080/ --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
                            }
                            /***
                             * Rollout
                             **/
                            openshift.selector('dc', APP_NAME_CANARY).rollout().latest()
                            //wait for rollout
                            openshift.selector('dc', APP_NAME_CANARY).rollout().status()

                            //echo pods
                            def latestVersion = openshift.selector('dc', APP_NAME_CANARY).object().status.latestVersion
                            echo "Canary pods up: " + openshift.selector('pod',['deployment':"$APP_NAME_CANARY-${latestVersion}"]).names()
                        }
                    }
                }
            }
        }

        stage("Configuring Mirror Traffic") {
            steps {
                sh 'oc apply -n ${DEPLOY_NAMESPACE} -f k8s/istio/hello-world-virtual-service-mirror.yaml'
            }
        }

        /*************
         * Ask to release canary to 10% - when canaryDc.exists()
         *************/
        stage("Verify Mirror Traffic") {
            steps {
                script {
                    promoteOrRollback = input message: 'Release canary deployment to 10% of Traffic?',
                            parameters: [choice(name: "Promote or Rollback?", choices: 'Promote\nRollback', description: '')]
                }
            }
        }

        stage("Rollback Mirror"){
            when{
                expression {
                    return promoteOrRollback == 'Rollback'
                }
            }
            steps{
                echo "Rollback for canary deployment."
                sh 'oc apply -n ${DEPLOY_NAMESPACE} -f k8s/istio/hello-world-virtual-service-init.yaml'
            }
        }

        stage("Release Canary to 10%") {
            steps {
                sh 'oc apply -n ${DEPLOY_NAMESPACE} -f k8s/istio/hello-world-virtual-service-canary-90-10.yaml'
            }
        }

       /*************
         * Ask to release canary to 50% - when canaryDc.exists()
         *************/
        stage("Verify Canary") {
            steps {
                script {
                    promoteOrRollback = input message: 'Release canary deployment to 50% of Traffic?',
                            parameters: [choice(name: "Promote or Rollback?", choices: 'Promote\nRollback', description: '')]
                }
            }
        }

        stage("Rollback canary"){
            when{
                expression {
                    return promoteOrRollback == 'Rollback'
                }
            }
            steps{
                echo "Rollback for canary deployment."
                sh 'oc apply -n ${DEPLOY_NAMESPACE} -f k8s/istio/hello-world-virtual-service-init.yaml'
            }
        }

        stage("Releasing Canary to 50%") {
            steps {
                sh 'oc apply -n ${DEPLOY_NAMESPACE} -f k8s/istio/hello-world-virtual-service-canary-50-50.yaml'
            }
        }

         /*************
         * Ask to promote to production
         *************/
        stage("Complete Rollout?") {
            steps {
                script {
                    promoteOrRollback = input message: 'Complete Rollout?',
                            parameters: [choice(name: "Complete Rollout or Rollback?", choices: 'Promote\nRollback', description: '')]
                }
            }
        }

        /*************
         * Production deployment
         *************/
        stage("Production deployment") {
            when{
                expression {
                    return promoteOrRollback != 'Rollback' //Promote or null (first deployment)
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("$DEPLOY_NAMESPACE") {
                            //Tag latest from build namespace
                            openshift.tag("$CICD_NAMESPACE/$APP_NAME:latest", "$DEPLOY_NAMESPACE/$APP_NAME:latest")

                            if (!openshift.selector('dc', APP_NAME).exists()) {
                                /***
                                 * First deployment
                                 **/
                                echo "First deployment of ${APP_NAME} in namespace ${DEPLOY_NAMESPACE}"

                                //Create new app
                                def newAppSelector = openshift.newApp("$DEPLOY_NAMESPACE/$APP_NAME", "--name=${APP_NAME}", "--labels=service=${APP_NAME}")
                                echo "Created: "+newAppSelector.names()

                                //wait for initial rollout
                                openshift.selector('dc', APP_NAME).rollout().status()

                                //Scale up
                                openshift.selector('dc', APP_NAME).scale("--replicas=${replicaCount}")

                                //Remove automatic trigger from DeploymentConfig
                                openshift.set("triggers", "dc/$APP_NAME", "--manual")

                                //Add readiness/liveness probes
                                openshift.set("probe dc/$APP_NAME --readiness --get-url=http://:8080/ --initial-delay-seconds=5 --failure-threshold=10 --period-seconds=10")
                                openshift.set("probe dc/$APP_NAME --liveness  --get-url=http://:8080/ --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")

                                //Create route
                                newAppSelector.narrow("svc").expose()
                                def route = openshift.selector("route",APP_NAME).object()
                                route.spec.to.weight=100-canaryWeight
                                route.spec.put("alternateBackends",[["kind":"Service", "name":APP_NAME_CANARY, "weight":canaryWeight]])
                                openshift.apply([route])
                                echo "Route created: "+openshift.selector("route",APP_NAME).object().spec.host

                            }
                            /***
                             * Rollout
                             **/
                            openshift.selector('dc', APP_NAME).rollout().latest()
                            //wait for rollout. It waits until pods are running (if readiness probe is set)
                            openshift.selector('dc', APP_NAME).rollout().status()

                            //echo pods
                            def latestVersion = openshift.selector('dc', APP_NAME).object().status.latestVersion
                            echo "Pods up: " + openshift.selector('pod',['deployment':"$APP_NAME-${latestVersion}"]).names()

                            // Remove Mirror
                            sh 'oc apply -n ${DEPLOY_NAMESPACE} -f k8s/istio/hello-world-virtual-service-init.yaml'
                        }
                    }
                }
            }
        }
    }
}
